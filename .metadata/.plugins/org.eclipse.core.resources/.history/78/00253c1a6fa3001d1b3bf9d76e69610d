package com.luis.navarro.bank.util;

import java.util.Arrays;
import java.util.LinkedList;
import java.util.List;

public class Util {

    // Function to convert camel case
    // string to snake case string
    public static String camelToSnake(String str) {
 
        // Empty String
        String result = "";
 
        // Append first character(in lower case)
        // to result string
        char c = str.charAt(0);
        result = result + Character.toLowerCase(c);
 
        // Traverse the string from
        // ist index to last index
        for (int i = 1; i < str.length(); i++) {
 
            char ch = str.charAt(i);
 
            // Check if the character is upper case
            // then append '_' and such character
            // (in lower case) to result string
            if (Character.isUpperCase(ch)) {
                result = result + '_';
                result
                    = result
                      + Character.toLowerCase(ch);
            }
 
            // If the character is lower case then
            // add such character into result string
            else {
                result = result + ch;
            }
        }
 
        // return the result
        return result;
    }
    
    /**
     * @param n
     * @return
     */
    public static Integer solutionSumDigits(int n) {
    	String number = String.valueOf(n);
    	Integer result = 0;
    	for(int i = 0; i < number.length(); i++) {
    	    int j = Character.digit(number.charAt(i), 10);
    	    result += Integer.valueOf(j);
    	}
    	
    	return result;
    }
    
    /**
     * @param picture
     * @return
     */
    public static String[] solution(String[] picture) {
    List<String> result = new LinkedList<>();
    	var wrapper = new Object(){ int index = 0; String textAsteric = "";};
    	Arrays.asList(picture).stream().forEach(p -> {
    		if (wrapper.index == 0) {
                for (int i=0;i<p.length();i++){
    			wrapper.textAsteric = wrapper.textAsteric + "*";
    		}
    			result.add("*" + wrapper.textAsteric + "*");
    		}
    		result.add("*" + p + "*");
    		wrapper.index += 1;
    	});
    	result.add("*" + wrapper.textAsteric + "*");
    	
    	return result.toArray(new String[0]);
    }

    /*
     * 	There is a bug in one line of the code. Find it, fix it, and submit.
		Given a non-negative integer a, your task is to check whether it is a palindrome or not. An integer is considered to be a palindrome if it reads the same in both directions.
		
		Example
		
		For a = 343, the output should be
		solution(a) = true;
		
		For a = 98, the output should be
		solution(a) = false.
		
		Input/Output
		
		[execution time limit] 3 seconds (java)
		
		[input] integer a
		
		A non-negative integer.
		
		Guaranteed constraints:
		0 ≤ a ≤ 2 · 109.
		
		[output] boolean
		
		true if the given number a is a palindrome, false otherwise.
     * */
    public static boolean solution(int a) {
        int reversedA = 0;
        int temp = a;
        while (temp > 0) {
            int lastDigit = temp % 10;
            reversedA *= 10 + lastDigit;

            temp /= 10;
        }
        return reversedA == a;
    }
}
